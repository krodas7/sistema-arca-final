#!/usr/bin/env python
"""
Script de diagn√≥stico del sistema para identificar problemas
con AJAX, Gunicorn y el dashboard
"""

import os
import sys
import django
from pathlib import Path

def configurar_django():
    """Configura Django para el script"""
    try:
        # Agregar el directorio del proyecto al path
        project_root = Path(__file__).parent
        sys.path.insert(0, str(project_root))
        
        # Configurar variables de entorno
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sistema_construccion.settings')
        
        # Configurar Django
        django.setup()
        
        print("‚úì Django configurado correctamente")
        return True
        
    except Exception as e:
        print(f"‚úó Error configurando Django: {e}")
        return False

def verificar_dependencias():
    """Verifica las dependencias del sistema"""
    print("\n=== VERIFICACI√ìN DE DEPENDENCIAS ===")
    
    # Verificar Django
    try:
        import django
        print(f"‚úì Django {django.get_version()} instalado")
    except ImportError:
        print("‚úó Django no est√° instalado")
        return False
    
    # Verificar dependencias de cache
    try:
        import django_redis
        print("‚úì django-redis instalado")
    except ImportError:
        print("‚ö† django-redis no est√° instalado (cache en memoria)")
    
    # Verificar dependencias de gr√°ficos
    try:
        import numpy
        print("‚úì NumPy instalado")
    except ImportError:
        print("‚úó NumPy no est√° instalado")
    
    try:
        import pandas
        print("‚úì Pandas instalado")
    except ImportError:
        print("‚úó Pandas no est√° instalado")
    
    try:
        import sklearn
        print("‚úì Scikit-learn instalado")
    except ImportError:
        print("‚úó Scikit-learn no est√° instalado")
    
    # Verificar Gunicorn
    try:
        import gunicorn
        print("‚úì Gunicorn instalado")
    except ImportError:
        print("‚ö† Gunicorn no est√° instalado (servidor de desarrollo)")
    
    return True

def verificar_configuracion():
    """Verifica la configuraci√≥n del sistema"""
    print("\n=== VERIFICACI√ìN DE CONFIGURACI√ìN ===")
    
    try:
        from django.conf import settings
        
        # Verificar configuraci√≥n de cache
        print(f"‚úì Cache backend: {settings.CACHES['default']['BACKEND']}")
        
        # Verificar configuraci√≥n de base de datos
        print(f"‚úì Base de datos: {settings.DATABASES['default']['ENGINE']}")
        
        # Verificar configuraci√≥n de archivos est√°ticos
        print(f"‚úì Archivos est√°ticos: {settings.STATIC_URL}")
        print(f"‚úì Directorio est√°tico: {settings.STATICFILES_DIRS}")
        
        # Verificar configuraci√≥n de media
        print(f"‚úì Media URL: {settings.MEDIA_URL}")
        print(f"‚úì Media root: {settings.MEDIA_ROOT}")
        
        # Verificar configuraci√≥n de templates
        print(f"‚úì Directorio de templates: {settings.TEMPLATES[0]['DIRS']}")
        
        return True
        
    except Exception as e:
        print(f"‚úó Error verificando configuraci√≥n: {e}")
        return False

def verificar_modelos():
    """Verifica que los modelos est√©n funcionando correctamente"""
    print("\n=== VERIFICACI√ìN DE MODELOS ===")
    
    try:
        from core.models import Cliente, Proyecto, Factura, Gasto, User
        
        # Verificar que se pueden hacer consultas b√°sicas
        total_clientes = Cliente.objects.count()
        total_proyectos = Proyecto.objects.count()
        total_facturas = Factura.objects.count()
        total_gastos = Gasto.objects.count()
        total_usuarios = User.objects.count()
        
        print(f"‚úì Clientes: {total_clientes}")
        print(f"‚úì Proyectos: {total_proyectos}")
        print(f"‚úì Facturas: {total_facturas}")
        print(f"‚úì Gastos: {total_gastos}")
        print(f"‚úì Usuarios: {total_usuarios}")
        
        return True
        
    except Exception as e:
        print(f"‚úó Error verificando modelos: {e}")
        return False

def verificar_urls():
    """Verifica que las URLs est√©n funcionando correctamente"""
    print("\n=== VERIFICACI√ìN DE URLs ===")
    
    try:
        from django.urls import reverse
        from django.test import Client
        
        client = Client()
        
        # Verificar URLs principales
        urls_a_verificar = [
            'dashboard',
            'clientes_list',
            'proyectos_list',
            'facturas_list',
            'gastos_list',
        ]
        
        for url_name in urls_a_verificar:
            try:
                url = reverse(url_name)
                print(f"‚úì {url_name}: {url}")
            except Exception as e:
                print(f"‚úó {url_name}: Error - {e}")
        
        return True
        
    except Exception as e:
        print(f"‚úó Error verificando URLs: {e}")
        return False

def verificar_archivos_estaticos():
    """Verifica que los archivos est√°ticos est√©n disponibles"""
    print("\n=== VERIFICACI√ìN DE ARCHIVOS EST√ÅTICOS ===")
    
    try:
        from django.conf import settings
        from django.contrib.staticfiles.finders import find
        
        # Verificar archivos CSS
        css_files = [
            'css/global-styles.css',
            'css/neostructure-theme.css',
            'css/neostructure-enhanced.css'
        ]
        
        for css_file in css_files:
            if find(css_file):
                print(f"‚úì {css_file} encontrado")
            else:
                print(f"‚úó {css_file} no encontrado")
        
        # Verificar archivos JavaScript
        js_files = [
            'js/global-functions.js',
            'js/dashboard-charts.js'
        ]
        
        for js_file in js_files:
            if find(js_file):
                print(f"‚úì {js_file} encontrado")
            else:
                print(f"‚úó {js_file} no encontrado")
        
        return True
        
    except Exception as e:
        print(f"‚úó Error verificando archivos est√°ticos: {e}")
        return False

def verificar_cache():
    """Verifica que el sistema de cache est√© funcionando"""
    print("\n=== VERIFICACI√ìN DE CACHE ===")
    
    try:
        from django.core.cache import cache
        
        # Probar operaciones b√°sicas de cache
        test_key = 'test_diagnostico'
        test_value = 'valor_prueba'
        
        # Escribir en cache
        cache.set(test_key, test_value, 60)
        print("‚úì Escritura en cache exitosa")
        
        # Leer del cache
        cached_value = cache.get(test_key)
        if cached_value == test_value:
            print("‚úì Lectura del cache exitosa")
        else:
            print("‚úó Error en lectura del cache")
        
        # Limpiar cache de prueba
        cache.delete(test_key)
        print("‚úì Limpieza de cache exitosa")
        
        return True
        
    except Exception as e:
        print(f"‚úó Error verificando cache: {e}")
        return False

def verificar_servidor():
    """Verifica el estado del servidor"""
    print("\n=== VERIFICACI√ìN DEL SERVIDOR ===")
    
    try:
        import socket
        
        # Verificar si el puerto 8000 est√° en uso
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = sock.connect_ex(('127.0.0.1', 8000))
        sock.close()
        
        if result == 0:
            print("‚úì Puerto 8000 est√° en uso (servidor activo)")
        else:
            print("‚ö† Puerto 8000 no est√° en uso (servidor inactivo)")
        
        return True
        
    except Exception as e:
        print(f"‚úó Error verificando servidor: {e}")
        return False

def generar_reporte():
    """Genera un reporte completo del diagn√≥stico"""
    print("\n" + "="*60)
    print("REPORTE DE DIAGN√ìSTICO DEL SISTEMA")
    print("="*60)
    
    # Ejecutar todas las verificaciones
    verificaciones = [
        ("Dependencias", verificar_dependencias),
        ("Configuraci√≥n", verificar_configuracion),
        ("Modelos", verificar_modelos),
        ("URLs", verificar_urls),
        ("Archivos Est√°ticos", verificar_archivos_estaticos),
        ("Cache", verificar_cache),
        ("Servidor", verificar_servidor),
    ]
    
    resultados = []
    for nombre, funcion in verificaciones:
        try:
            resultado = funcion()
            resultados.append((nombre, resultado))
        except Exception as e:
            print(f"‚úó Error en verificaci√≥n {nombre}: {e}")
            resultados.append((nombre, False))
    
    # Resumen final
    print("\n" + "="*60)
    print("RESUMEN DEL DIAGN√ìSTICO")
    print("="*60)
    
    total_verificaciones = len(resultados)
    verificaciones_exitosas = sum(1 for _, resultado in resultados if resultado)
    
    print(f"Total de verificaciones: {total_verificaciones}")
    print(f"Verificaciones exitosas: {verificaciones_exitosas}")
    print(f"Verificaciones fallidas: {total_verificaciones - verificaciones_exitosas}")
    
    if verificaciones_exitosas == total_verificaciones:
        print("\nüéâ ¬°SISTEMA FUNCIONANDO PERFECTAMENTE!")
    elif verificaciones_exitosas > total_verificaciones // 2:
        print("\n‚ö†Ô∏è SISTEMA FUNCIONANDO CON ALGUNOS PROBLEMAS")
        print("Revisa los errores anteriores para m√°s detalles")
    else:
        print("\n‚ùå SISTEMA CON PROBLEMAS CR√çTICOS")
        print("Se requiere atenci√≥n inmediata")
    
    # Recomendaciones
    print("\n" + "="*60)
    print("RECOMENDACIONES")
    print("="*60)
    
    if not any("Gunicorn" in str(resultado) for _, resultado in resultados):
        print("‚Ä¢ Instalar Gunicorn para producci√≥n: pip install gunicorn")
    
    if not any("django-redis" in str(resultado) for _, resultado in resultados):
        print("‚Ä¢ Instalar django-redis para cache avanzado: pip install django-redis")
    
    print("‚Ä¢ Verificar logs del servidor para errores espec√≠ficos")
    print("‚Ä¢ Revisar la consola del navegador para errores JavaScript")
    print("‚Ä¢ Verificar que todos los archivos est√°ticos est√©n en su lugar")
    
    return resultados

def main():
    """Funci√≥n principal"""
    print("DIAGN√ìSTICO DEL SISTEMA DE CONSTRUCCI√ìN")
    print("="*60)
    
    # Configurar Django
    if not configurar_django():
        print("No se puede continuar sin Django configurado")
        return
    
    # Generar reporte completo
    resultados = generar_reporte()
    
    print("\n" + "="*60)
    print("DIAGN√ìSTICO COMPLETADO")
    print("="*60)

if __name__ == "__main__":
    main()
