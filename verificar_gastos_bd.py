#!/usr/bin/env python3
"""
Script para verificar que los gastos se est√©n guardando correctamente en la base de datos
"""

import os
import sys
import django
from datetime import datetime, date

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sistema_construccion.settings')
django.setup()

from core.models import Gasto, Proyecto, CategoriaGasto, Cliente
from django.contrib.auth.models import User

def verificar_gastos_bd():
    """Verificar que los gastos se est√©n guardando en la base de datos"""
    print("üîç VERIFICACI√ìN DE GASTOS EN BASE DE DATOS")
    print("=" * 50)
    
    # 1. Contar gastos totales
    print("\n1Ô∏è‚É£ CONTEO DE GASTOS:")
    total_gastos = Gasto.objects.count()
    print(f"  üìä Total de gastos en BD: {total_gastos}")
    
    if total_gastos == 0:
        print("  ‚ö†Ô∏è No hay gastos en la base de datos")
        return False
    
    # 2. Mostrar gastos recientes
    print(f"\n2Ô∏è‚É£ GASTOS RECIENTES (√∫ltimos 5):")
    gastos_recientes = Gasto.objects.all().order_by('-fecha_gasto')[:5]
    
    for i, gasto in enumerate(gastos_recientes, 1):
        print(f"  {i}. {gasto.descripcion}")
        print(f"     üí∞ Monto: Q{gasto.monto}")
        print(f"     üìÖ Fecha: {gasto.fecha_gasto}")
        print(f"     üè∑Ô∏è Categor√≠a: {gasto.categoria.nombre if gasto.categoria else 'Sin categor√≠a'}")
        print(f"     üèóÔ∏è Proyecto: {gasto.proyecto.nombre if gasto.proyecto else 'Sin proyecto'}")
        print(f"     ‚úÖ Aprobado: {'S√≠' if gasto.aprobado else 'No'}")
        print(f"     üìÑ Comprobante: {'S√≠' if gasto.comprobante else 'No'}")
        print(f"     üë§ Aprobado por: {gasto.aprobado_por.username if gasto.aprobado_por else 'N/A'}")
        print(f"     üìÖ Creado: {gasto.creado_en.strftime('%Y-%m-%d %H:%M')}")
        print()
    
    # 3. Verificar integridad de datos
    print("3Ô∏è‚É£ VERIFICACI√ìN DE INTEGRIDAD:")
    
    # Gastos sin categor√≠a
    gastos_sin_categoria = Gasto.objects.filter(categoria__isnull=True).count()
    print(f"  üìä Gastos sin categor√≠a: {gastos_sin_categoria}")
    
    # Gastos sin proyecto
    gastos_sin_proyecto = Gasto.objects.filter(proyecto__isnull=True).count()
    print(f"  üìä Gastos sin proyecto: {gastos_sin_proyecto}")
    
    # Gastos aprobados vs pendientes
    gastos_aprobados = Gasto.objects.filter(aprobado=True).count()
    gastos_pendientes = Gasto.objects.filter(aprobado=False).count()
    print(f"  üìä Gastos aprobados: {gastos_aprobados}")
    print(f"  üìä Gastos pendientes: {gastos_pendientes}")
    
    # 4. Calcular totales
    print(f"\n4Ô∏è‚É£ C√ÅLCULOS FINANCIEROS:")
    total_monto = sum(gasto.monto for gasto in Gasto.objects.all())
    total_aprobado = sum(gasto.monto for gasto in Gasto.objects.filter(aprobado=True))
    total_pendiente = sum(gasto.monto for gasto in Gasto.objects.filter(aprobado=False))
    
    print(f"  üí∞ Total general: Q{total_monto:,.2f}")
    print(f"  ‚úÖ Total aprobado: Q{total_aprobado:,.2f}")
    print(f"  ‚è≥ Total pendiente: Q{total_pendiente:,.2f}")
    
    # 5. Verificar relaciones
    print(f"\n5Ô∏è‚É£ VERIFICACI√ìN DE RELACIONES:")
    
    # Proyectos con gastos
    proyectos_con_gastos = Proyecto.objects.filter(gasto__isnull=False).distinct().count()
    print(f"  üìä Proyectos con gastos: {proyectos_con_gastos}")
    
    # Categor√≠as con gastos
    categorias_con_gastos = CategoriaGasto.objects.filter(gasto__isnull=False).distinct().count()
    print(f"  üìä Categor√≠as con gastos: {categorias_con_gastos}")
    
    # 6. Mostrar gastos por proyecto
    print(f"\n6Ô∏è‚É£ GASTOS POR PROYECTO:")
    proyectos = Proyecto.objects.all()
    for proyecto in proyectos:
        gastos_proyecto = Gasto.objects.filter(proyecto=proyecto)
        if gastos_proyecto.exists():
            total_proyecto = sum(g.monto for g in gastos_proyecto)
            print(f"  üèóÔ∏è {proyecto.nombre}: {gastos_proyecto.count()} gastos - Q{total_proyecto:,.2f}")
    
    # 7. Mostrar gastos por categor√≠a
    print(f"\n7Ô∏è‚É£ GASTOS POR CATEGOR√çA:")
    categorias = CategoriaGasto.objects.all()
    for categoria in categorias:
        gastos_categoria = Gasto.objects.filter(categoria=categoria)
        if gastos_categoria.exists():
            total_categoria = sum(g.monto for g in gastos_categoria)
            print(f"  üè∑Ô∏è {categoria.nombre}: {gastos_categoria.count()} gastos - Q{total_categoria:,.2f}")
    
    return True

def crear_gasto_prueba():
    """Crear un gasto de prueba para verificar que funciona"""
    print(f"\n8Ô∏è‚É£ CREANDO GASTO DE PRUEBA:")
    
    try:
        # Obtener datos necesarios
        proyecto = Proyecto.objects.first()
        categoria = CategoriaGasto.objects.first()
        
        if not proyecto:
            print("  ‚ùå No hay proyectos disponibles")
            return False
        
        if not categoria:
            print("  ‚ùå No hay categor√≠as disponibles")
            return False
        
        # Crear gasto de prueba
        gasto = Gasto.objects.create(
            descripcion="Gasto de prueba - Verificaci√≥n BD",
            monto=500.00,
            categoria=categoria,
            proyecto=proyecto,
            fecha_gasto=date.today()
        )
        
        print(f"  ‚úÖ Gasto de prueba creado:")
        print(f"     ID: {gasto.id}")
        print(f"     Descripci√≥n: {gasto.descripcion}")
        print(f"     Monto: Q{gasto.monto}")
        print(f"     Fecha: {gasto.fecha_gasto}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Error creando gasto de prueba: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üîç VERIFICACI√ìN COMPLETA DE GASTOS EN BD")
    print("=" * 60)
    
    try:
        # Verificar gastos existentes
        gastos_ok = verificar_gastos_bd()
        
        # Crear gasto de prueba
        prueba_ok = crear_gasto_prueba()
        
        # Resumen final
        print(f"\n" + "=" * 60)
        print("üìã RESUMEN FINAL")
        print("=" * 60)
        
        if gastos_ok:
            print("‚úÖ GASTOS SE EST√ÅN GUARDANDO CORRECTAMENTE EN LA BD")
            print("‚úÖ Todas las relaciones funcionan correctamente")
            print("‚úÖ Los c√°lculos financieros son precisos")
        else:
            print("‚ö†Ô∏è HAY PROBLEMAS CON EL ALMACENAMIENTO DE GASTOS")
        
        if prueba_ok:
            print("‚úÖ Creaci√≥n de gastos funciona correctamente")
        else:
            print("‚ùå Hay problemas al crear nuevos gastos")
        
        return gastos_ok and prueba_ok
        
    except Exception as e:
        print(f"\n‚ùå ERROR CR√çTICO: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
