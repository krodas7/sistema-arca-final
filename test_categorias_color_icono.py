#!/usr/bin/env python3
"""
Script para probar la funcionalidad de colores e iconos en categor√≠as de gastos
"""

import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sistema_construccion.settings')
django.setup()

from django.test import Client
from django.contrib.auth.models import User
from core.models import CategoriaGasto, Gasto, Proyecto, Cliente
from django.db.models import Sum, Count

def probar_creacion_categoria_con_color_icono():
    """Probar la creaci√≥n de categor√≠as con color e icono"""
    print("üé® PROBANDO CREACI√ìN DE CATEGOR√çAS CON COLOR E ICONO")
    print("=" * 60)
    
    client = Client()
    
    # Obtener usuario admin
    admin_user = User.objects.filter(is_superuser=True).first()
    if not admin_user:
        print("‚ùå No hay usuario admin")
        return False
    
    # Autenticar
    client.force_login(admin_user)
    print(f"‚úÖ Usuario autenticado: {admin_user.username}")
    
    # Datos de prueba para categor√≠as
    categorias_prueba = [
        {
            'nombre': 'Materiales de Construcci√≥n',
            'descripcion': 'Cemento, ladrillos, arena, etc.',
            'color': '#dc3545',
            'icono': 'fas fa-hammer'
        },
        {
            'nombre': 'Equipos y Maquinaria',
            'descripcion': 'Alquiler de equipos pesados',
            'color': '#007bff',
            'icono': 'fas fa-truck'
        },
        {
            'nombre': 'Mano de Obra',
            'descripcion': 'Salarios y pagos a trabajadores',
            'color': '#28a745',
            'icono': 'fas fa-users'
        },
        {
            'nombre': 'Seguridad Industrial',
            'descripcion': 'Equipos de protecci√≥n personal',
            'color': '#ffc107',
            'icono': 'fas fa-hard-hat'
        },
        {
            'nombre': 'Servicios P√∫blicos',
            'descripcion': 'Electricidad, agua, tel√©fono',
            'color': '#6f42c1',
            'icono': 'fas fa-bolt'
        }
    ]
    
    categorias_creadas = 0
    
    for cat_data in categorias_prueba:
        print(f"\nüìù Creando categor√≠a: {cat_data['nombre']}")
        
        # Crear categor√≠a via POST
        response = client.post('/categorias-gasto/crear/', {
            'nombre': cat_data['nombre'],
            'descripcion': cat_data['descripcion'],
            'color': cat_data['color'],
            'icono': cat_data['icono']
        })
        
        if response.status_code == 302:
            print(f"  ‚úÖ Categor√≠a creada exitosamente")
            categorias_creadas += 1
        else:
            print(f"  ‚ùå Error creando categor√≠a: {response.status_code}")
            if hasattr(response, 'content'):
                print(f"  üìÑ Respuesta: {response.content.decode()[:200]}...")
    
    print(f"\nüìä RESUMEN DE CREACI√ìN:")
    print(f"  ‚úÖ Categor√≠as creadas: {categorias_creadas}")
    print(f"  ‚úÖ Total categor√≠as en BD: {CategoriaGasto.objects.count()}")
    
    return categorias_creadas > 0

def verificar_categorias_en_dashboard():
    """Verificar que las categor√≠as se muestren correctamente en el dashboard"""
    print("\nüìä VERIFICANDO CATEGOR√çAS EN DASHBOARD")
    print("=" * 60)
    
    client = Client()
    
    # Obtener usuario admin
    admin_user = User.objects.filter(is_superuser=True).first()
    if not admin_user:
        print("‚ùå No hay usuario admin")
        return False
    
    # Autenticar
    client.force_login(admin_user)
    
    try:
        # Acceder al dashboard
        response = client.get('/gastos/dashboard/')
        
        if response.status_code == 200:
            content = response.content.decode()
            
            # Verificar que se muestren las categor√≠as con color e icono
            if 'categoria-icon' in content and 'categoria-header' in content:
                print("  ‚úÖ Estructura de categor√≠as con iconos presente")
            else:
                print("  ‚ùå Estructura de categor√≠as con iconos faltante")
                return False
            
            # Verificar que haya categor√≠as en la BD
            categorias_con_datos = CategoriaGasto.objects.annotate(
                total_gastos=Count('gasto')
            ).filter(total_gastos__gt=0)
            
            if categorias_con_datos.exists():
                print(f"  ‚úÖ {categorias_con_datos.count()} categor√≠as con gastos encontradas")
                
                # Verificar colores e iconos
                for categoria in categorias_con_datos:
                    print(f"    üìã {categoria.nombre}:")
                    print(f"      üé® Color: {categoria.color}")
                    print(f"      üîß Icono: {categoria.icono}")
            else:
                print("  ‚ö†Ô∏è  No hay categor√≠as con gastos")
            
            return True
        else:
            print(f"  ‚ùå Error accediendo al dashboard: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"  ‚ùå Error: {e}")
        return False

def probar_edicion_categoria():
    """Probar la edici√≥n de categor√≠as con color e icono"""
    print("\n‚úèÔ∏è PROBANDO EDICI√ìN DE CATEGOR√çAS")
    print("=" * 60)
    
    client = Client()
    
    # Obtener usuario admin
    admin_user = User.objects.filter(is_superuser=True).first()
    if not admin_user:
        print("‚ùå No hay usuario admin")
        return False
    
    # Autenticar
    client.force_login(admin_user)
    
    # Obtener una categor√≠a existente
    categoria = CategoriaGasto.objects.first()
    if not categoria:
        print("  ‚ùå No hay categor√≠as para editar")
        return False
    
    print(f"  üìù Editando categor√≠a: {categoria.nombre}")
    
    # Datos de edici√≥n
    nuevos_datos = {
        'nombre': f"{categoria.nombre} (Editada)",
        'descripcion': f"Descripci√≥n editada para {categoria.nombre}",
        'color': '#e83e8c',
        'icono': 'fas fa-paint-brush'
    }
    
    # Editar categor√≠a
    response = client.post(f'/categorias-gasto/{categoria.id}/editar/', nuevos_datos)
    
    if response.status_code == 302:
        print("  ‚úÖ Categor√≠a editada exitosamente")
        
        # Verificar cambios en la BD
        categoria.refresh_from_db()
        if categoria.nombre == nuevos_datos['nombre'] and categoria.color == nuevos_datos['color']:
            print("  ‚úÖ Cambios guardados correctamente en la BD")
            return True
        else:
            print("  ‚ùå Los cambios no se guardaron correctamente")
            return False
    else:
        print(f"  ‚ùå Error editando categor√≠a: {response.status_code}")
        return False

def mostrar_categorias_existentes():
    """Mostrar todas las categor√≠as existentes con sus colores e iconos"""
    print("\nüìã CATEGOR√çAS EXISTENTES EN LA BASE DE DATOS")
    print("=" * 60)
    
    categorias = CategoriaGasto.objects.all()
    
    if not categorias.exists():
        print("  ‚ùå No hay categor√≠as en la base de datos")
        return
    
    for i, categoria in enumerate(categorias, 1):
        print(f"  {i}. {categoria.nombre}")
        print(f"     üé® Color: {categoria.color}")
        print(f"     üîß Icono: {categoria.icono}")
        print(f"     üìù Descripci√≥n: {categoria.descripcion}")
        print(f"     üìÖ Creada: {categoria.creado_en.strftime('%d/%m/%Y %H:%M')}")
        print()

def main():
    """Funci√≥n principal"""
    print("üé® PRUEBA DE COLORES E ICONOS EN CATEGOR√çAS DE GASTOS")
    print("=" * 70)
    
    try:
        # Mostrar categor√≠as existentes
        mostrar_categorias_existentes()
        
        # Probar creaci√≥n de categor√≠as
        creacion_ok = probar_creacion_categoria_con_color_icono()
        
        # Verificar en dashboard
        dashboard_ok = verificar_categorias_en_dashboard()
        
        # Probar edici√≥n
        edicion_ok = probar_edicion_categoria()
        
        # Resumen final
        print(f"\n" + "=" * 70)
        print("üìã RESUMEN FINAL")
        print("=" * 70)
        
        if creacion_ok and dashboard_ok and edicion_ok:
            print("üéâ ¬°FUNCIONALIDAD DE COLORES E ICONOS FUNCIONANDO PERFECTAMENTE!")
            print("‚úÖ Creaci√≥n de categor√≠as con color e icono: OK")
            print("‚úÖ Visualizaci√≥n en dashboard: OK")
            print("‚úÖ Edici√≥n de categor√≠as: OK")
            print("‚úÖ Persistencia en base de datos: OK")
            
            print(f"\nüåê PARA PROBAR:")
            print("  1. Ve a: http://localhost:8000/categorias-gasto/crear/")
            print("  2. Crea una categor√≠a con color e icono personalizados")
            print("  3. Ve al dashboard: http://localhost:8000/gastos/dashboard/")
            print("  4. Observa las categor√≠as con sus colores e iconos")
        else:
            print("‚ùå HAY PROBLEMAS CON LA FUNCIONALIDAD")
            if not creacion_ok:
                print("  - Problemas con creaci√≥n de categor√≠as")
            if not dashboard_ok:
                print("  - Problemas con visualizaci√≥n en dashboard")
            if not edicion_ok:
                print("  - Problemas con edici√≥n de categor√≠as")
        
        return creacion_ok and dashboard_ok and edicion_ok
        
    except Exception as e:
        print(f"\n‚ùå ERROR CR√çTICO: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
