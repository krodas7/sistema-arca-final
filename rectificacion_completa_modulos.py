#!/usr/bin/env python3
"""
Script de rectificaci√≥n completa de todos los m√≥dulos del sistema
"""

import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sistema_construccion.settings')
django.setup()

from django.test import Client
from django.contrib.auth.models import User, Group
from django.urls import reverse
from core.models import *

def verificar_usuarios():
    """Verificar y crear usuarios necesarios"""
    print("üë• VERIFICANDO USUARIOS...")
    
    # Verificar usuario admin
    admin_user, created = User.objects.get_or_create(
        username='admin',
        defaults={
            'email': 'admin@construccionesarca.com',
            'first_name': 'Administrador',
            'last_name': 'Sistema',
            'is_staff': True,
            'is_superuser': True
        }
    )
    
    if created:
        admin_user.set_password('admin')
        admin_user.save()
        print("  ‚úÖ Usuario admin creado")
    else:
        print("  ‚úÖ Usuario admin existe")
    
    return admin_user

def verificar_datos_basicos():
    """Verificar que existan datos b√°sicos necesarios"""
    print("\nüìä VERIFICANDO DATOS B√ÅSICOS...")
    
    # Verificar categor√≠as de gastos
    categorias_gastos = [
        'Materiales de Construcci√≥n',
        'Mano de Obra',
        'Equipos y Herramientas',
        'Transporte',
        'Servicios Profesionales',
        'Otros Gastos'
    ]
    
    for categoria in categorias_gastos:
        cat, created = CategoriaGasto.objects.get_or_create(nombre=categoria)
        if created:
            print(f"  ‚úÖ Categor√≠a de gasto creada: {categoria}")
    
    # Verificar roles de usuario
    roles = ['Administrador', 'Gerente', 'Supervisor', 'Operador']
    for rol in roles:
        group, created = Group.objects.get_or_create(name=rol)
        if created:
            print(f"  ‚úÖ Rol creado: {rol}")
    
    print("  ‚úÖ Datos b√°sicos verificados")

def probar_modulo(nombre, url_name, descripcion=""):
    """Probar un m√≥dulo espec√≠fico"""
    try:
        url = reverse(url_name)
        return True, f"URL v√°lida: {url}"
    except Exception as e:
        return False, f"Error: {e}"

def verificar_todos_los_modulos():
    """Verificar todos los m√≥dulos del sistema"""
    print("\nüîç VERIFICANDO TODOS LOS M√ìDULOS...")
    
    modulos = [
        # M√≥dulos principales
        ("Dashboard", "dashboard", "Panel principal del sistema"),
        ("Proyectos", "proyectos_list", "Gesti√≥n de proyectos"),
        ("Clientes", "clientes_list", "Gesti√≥n de clientes"),
        ("Facturas", "facturas_list", "Gesti√≥n de facturas"),
        ("Colaboradores", "colaboradores_list", "Gesti√≥n de colaboradores"),
        ("Gastos", "gastos_list", "Gesti√≥n de gastos"),
        ("Inventario", "inventario_dashboard", "Dashboard de inventario"),
        ("Presupuestos", "presupuestos_list", "Gesti√≥n de presupuestos"),
        ("Usuarios", "usuarios_lista", "Gesti√≥n de usuarios"),
        ("Archivos", "archivos_proyectos_list", "Gesti√≥n de archivos"),
        ("Anticipos", "anticipos_list", "Gesti√≥n de anticipos"),
        ("Pagos", "pagos_list", "Gesti√≥n de pagos"),
        ("Rentabilidad", "rentabilidad", "An√°lisis de rentabilidad"),
        ("Sistema", "sistema", "Configuraci√≥n del sistema"),
        
        # M√≥dulos de inventario
        ("Categor√≠as Inventario", "categoria_list", "Categor√≠as de inventario"),
        ("Items Inventario", "item_list", "Items de inventario"),
        ("Asignaciones", "asignacion_list", "Asignaciones de inventario"),
        
        # M√≥dulos de archivos
        ("Subir Archivo", "archivo_upload", "Subir archivos"),
        ("Descargar Archivo", "archivo_download", "Descargar archivos"),
        ("Eliminar Archivo", "archivo_delete", "Eliminar archivos"),
        
        # M√≥dulos de sistema
        ("Reset App", "sistema_reset_app", "Reset de aplicaci√≥n"),
        ("Crear Respaldo", "sistema_crear_respaldo", "Crear respaldo"),
        ("Ver Respaldos", "sistema_ver_respaldos", "Ver respaldos"),
        ("Logs Sistema", "sistema_logs", "Logs del sistema"),
    ]
    
    resultados = []
    
    for nombre, url_name, descripcion in modulos:
        print(f"\nüîç Probando {nombre}...")
        try:
            url = reverse(url_name)
            print(f"  ‚úÖ {nombre}: {url}")
            resultados.append((nombre, True, "OK", url))
        except Exception as e:
            print(f"  ‚ùå {nombre}: {e}")
            resultados.append((nombre, False, str(e), ""))
    
    return resultados

def verificar_formularios():
    """Verificar que todos los formularios funcionen"""
    print("\nüìù VERIFICANDO FORMULARIOS...")
    
    from core.forms_simple import (
        ProyectoForm, ClienteForm, FacturaForm, AnticipoForm, PagoForm,
        PresupuestoForm, CategoriaInventarioForm, ItemInventarioForm, ArchivoProyectoForm
    )
    
    formularios = [
        ("ProyectoForm", ProyectoForm, "Formulario de proyectos"),
        ("ClienteForm", ClienteForm, "Formulario de clientes"),
        ("FacturaForm", FacturaForm, "Formulario de facturas"),
        ("AnticipoForm", AnticipoForm, "Formulario de anticipos"),
        ("PagoForm", PagoForm, "Formulario de pagos"),
        ("PresupuestoForm", PresupuestoForm, "Formulario de presupuestos"),
        ("CategoriaInventarioForm", CategoriaInventarioForm, "Formulario de categor√≠as"),
        ("ItemInventarioForm", ItemInventarioForm, "Formulario de items"),
        ("ArchivoProyectoForm", ArchivoProyectoForm, "Formulario de archivos"),
    ]
    
    for nombre, form_class, descripcion in formularios:
        try:
            form = form_class()
            print(f"  ‚úÖ {nombre}: {descripcion}")
        except Exception as e:
            print(f"  ‚ùå {nombre}: {e}")

def verificar_modelos():
    """Verificar que todos los modelos funcionen"""
    print("\nüóÑÔ∏è VERIFICANDO MODELOS...")
    
    modelos = [
        ("Proyecto", Proyecto, "Modelo de proyectos"),
        ("Cliente", Cliente, "Modelo de clientes"),
        ("Factura", Factura, "Modelo de facturas"),
        ("Anticipo", Anticipo, "Modelo de anticipos"),
        ("Pago", Pago, "Modelo de pagos"),
        ("Presupuesto", Presupuesto, "Modelo de presupuestos"),
        ("CategoriaInventario", CategoriaInventario, "Modelo de categor√≠as"),
        ("ItemInventario", ItemInventario, "Modelo de items"),
        ("ArchivoProyecto", ArchivoProyecto, "Modelo de archivos"),
        ("Colaborador", Colaborador, "Modelo de colaboradores"),
        ("Gasto", Gasto, "Modelo de gastos"),
    ]
    
    for nombre, model_class, descripcion in modelos:
        try:
            count = model_class.objects.count()
            print(f"  ‚úÖ {nombre}: {count} registros - {descripcion}")
        except Exception as e:
            print(f"  ‚ùå {nombre}: {e}")

def verificar_templates():
    """Verificar que los templates principales existan"""
    print("\nüé® VERIFICANDO TEMPLATES...")
    
    templates_importantes = [
        "base.html",
        "core/dashboard.html",
        "core/proyectos/list.html",
        "core/clientes/list.html",
        "core/facturas/list.html",
        "core/anticipos/list.html",
        "core/archivos/upload.html",
        "core/sistema/index.html",
    ]
    
    for template in templates_importantes:
        template_path = f"templates/{template}"
        if os.path.exists(template_path):
            print(f"  ‚úÖ {template}")
        else:
            print(f"  ‚ùå {template} - NO ENCONTRADO")

def generar_reporte_final(resultados):
    """Generar reporte final de la rectificaci√≥n"""
    print("\n" + "="*60)
    print("üìã REPORTE FINAL DE RECTIFICACI√ìN")
    print("="*60)
    
    funcionando = sum(1 for _, ok, _, _ in resultados if ok)
    con_problemas = len(resultados) - funcionando
    
    print(f"\nüìä ESTAD√çSTICAS:")
    print(f"  ‚úÖ M√≥dulos funcionando: {funcionando}")
    print(f"  ‚ùå M√≥dulos con problemas: {con_problemas}")
    print(f"  üìà Total de m√≥dulos: {len(resultados)}")
    print(f"  üéØ Porcentaje de √©xito: {(funcionando/len(resultados)*100):.1f}%")
    
    if con_problemas > 0:
        print(f"\n‚ùå M√ìDULOS CON PROBLEMAS:")
        for nombre, ok, error, url in resultados:
            if not ok:
                print(f"  ‚Ä¢ {nombre}: {error}")
    
    print(f"\nüéâ RECTIFICACI√ìN COMPLETADA!")
    print(f"   El sistema est√° {'FUNCIONANDO PERFECTAMENTE' if con_problemas == 0 else 'CON ALGUNOS PROBLEMAS'}")
    
    return con_problemas == 0

def main():
    """Funci√≥n principal de rectificaci√≥n"""
    print("üîß RECTIFICACI√ìN COMPLETA DEL SISTEMA")
    print("="*50)
    
    try:
        # 1. Verificar usuarios
        admin_user = verificar_usuarios()
        
        # 2. Verificar datos b√°sicos
        verificar_datos_basicos()
        
        # 3. Verificar modelos
        verificar_modelos()
        
        # 4. Verificar formularios
        verificar_formularios()
        
        # 5. Verificar templates
        verificar_templates()
        
        # 6. Verificar todos los m√≥dulos
        resultados = verificar_todos_los_modulos()
        
        # 7. Generar reporte final
        todo_ok = generar_reporte_final(resultados)
        
        if todo_ok:
            print(f"\nüåê Para probar el sistema:")
            print(f"   1. Ve a: http://localhost:8000/")
            print(f"   2. Inicia sesi√≥n con: admin / admin")
            print(f"   3. Navega por todos los m√≥dulos del men√∫")
        
        return todo_ok
        
    except Exception as e:
        print(f"\n‚ùå ERROR CR√çTICO EN LA RECTIFICACI√ìN: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
