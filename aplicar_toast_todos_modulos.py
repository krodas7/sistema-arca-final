#!/usr/bin/env python3
"""
Script para aplicar notificaciones toast a todos los m√≥dulos del sistema
"""

import os
import sys
import django
import re

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sistema_construccion.settings')
django.setup()

def buscar_notificaciones_en_views():
    """Buscar todas las notificaciones en views.py"""
    print("üîç BUSCANDO NOTIFICACIONES EN TODOS LOS M√ìDULOS")
    print("=" * 60)
    
    with open('core/views.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Buscar patrones de notificaciones
    patrones = [
        r'messages\.success\(request,\s*[\'"](.*?)[\'"]\)',
        r'messages\.error\(request,\s*[\'"](.*?)[\'"]\)',
        r'messages\.warning\(request,\s*[\'"](.*?)[\'"]\)',
        r'messages\.info\(request,\s*[\'"](.*?)[\'"]\)'
    ]
    
    notificaciones_encontradas = []
    
    for i, patron in enumerate(patrones):
        matches = re.findall(patron, content, re.MULTILINE | re.DOTALL)
        tipo = ['success', 'error', 'warning', 'info'][i]
        
        for match in matches:
            notificaciones_encontradas.append({
                'tipo': tipo,
                'mensaje': match.strip(),
                'linea': content[:content.find(match)].count('\n') + 1
            })
    
    print(f"üìä Total de notificaciones encontradas: {len(notificaciones_encontradas)}")
    
    # Agrupar por m√≥dulo
    modulos = {}
    for notif in notificaciones_encontradas:
        # Buscar el contexto de la funci√≥n
        lines = content.split('\n')
        for i, line in enumerate(lines):
            if notif['mensaje'] in line:
                # Buscar la funci√≥n que contiene esta l√≠nea
                for j in range(i, max(0, i-20), -1):
                    if 'def ' in lines[j] and 'request' in lines[j]:
                        func_name = lines[j].split('def ')[1].split('(')[0]
                        if func_name not in modulos:
                            modulos[func_name] = []
                        modulos[func_name].append(notif)
                        break
                break
    
    print(f"\nüìã NOTIFICACIONES POR M√ìDULO:")
    for modulo, notifs in modulos.items():
        print(f"  üîπ {modulo}: {len(notifs)} notificaciones")
        for notif in notifs[:3]:  # Mostrar solo las primeras 3
            print(f"    - {notif['tipo']}: {notif['mensaje'][:50]}...")
        if len(notifs) > 3:
            print(f"    ... y {len(notifs) - 3} m√°s")
    
    return modulos

def simplificar_notificaciones():
    """Simplificar todas las notificaciones para usar toast"""
    print(f"\nüîß SIMPLIFICANDO NOTIFICACIONES PARA TOAST")
    print("=" * 60)
    
    with open('core/views.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Patrones de notificaciones complejas a simplificar
    patrones_complejos = [
        # Notificaciones con HTML complejo
        (r'messages\.success\(request,\s*[\'"]<div.*?</div>[\'"]\)', 'messages.success(request, \'Operaci√≥n realizada exitosamente\')'),
        (r'messages\.error\(request,\s*[\'"]<div.*?</div>[\'"]\)', 'messages.error(request, \'Error en la operaci√≥n\')'),
        (r'messages\.warning\(request,\s*[\'"]<div.*?</div>[\'"]\)', 'messages.warning(request, \'Advertencia en la operaci√≥n\')'),
        (r'messages\.info\(request,\s*[\'"]<div.*?</div>[\'"]\)', 'messages.info(request, \'Informaci√≥n importante\')'),
    ]
    
    cambios_realizados = 0
    
    for patron, reemplazo in patrones_complejos:
        matches = re.findall(patron, content, re.MULTILINE | re.DOTALL)
        if matches:
            print(f"  üîÑ Simplificando {len(matches)} notificaciones complejas...")
            content = re.sub(patron, reemplazo, content, flags=re.MULTILINE | re.DOTALL)
            cambios_realizados += len(matches)
    
    # Guardar cambios
    if cambios_realizados > 0:
        with open('core/views.py', 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"  ‚úÖ {cambios_realizados} notificaciones simplificadas")
    else:
        print("  ‚úÖ No se encontraron notificaciones complejas para simplificar")
    
    return cambios_realizados

def crear_notificaciones_especificas():
    """Crear notificaciones espec√≠ficas para cada m√≥dulo"""
    print(f"\nüéØ CREANDO NOTIFICACIONES ESPEC√çFICAS POR M√ìDULO")
    print("=" * 60)
    
    # Definir notificaciones espec√≠ficas para cada m√≥dulo
    notificaciones_modulos = {
        'proyecto_create': {
            'success': 'Proyecto "{proyecto.nombre}" creado exitosamente',
            'error': 'Error al crear el proyecto'
        },
        'proyecto_edit': {
            'success': 'Proyecto "{proyecto.nombre}" actualizado exitosamente',
            'error': 'Error al actualizar el proyecto'
        },
        'proyecto_delete': {
            'success': 'Proyecto "{proyecto.nombre}" eliminado exitosamente',
            'error': 'Error al eliminar el proyecto'
        },
        'cliente_create': {
            'success': 'Cliente "{cliente.razon_social}" creado exitosamente',
            'error': 'Error al crear el cliente'
        },
        'cliente_edit': {
            'success': 'Cliente "{cliente.razon_social}" actualizado exitosamente',
            'error': 'Error al actualizar el cliente'
        },
        'cliente_delete': {
            'success': 'Cliente "{cliente.razon_social}" eliminado exitosamente',
            'error': 'Error al eliminar el cliente'
        },
        'gasto_create': {
            'success': 'Gasto registrado exitosamente',
            'error': 'Error al registrar el gasto'
        },
        'gasto_edit': {
            'success': 'Gasto actualizado exitosamente',
            'error': 'Error al actualizar el gasto'
        },
        'gasto_delete': {
            'success': 'Gasto eliminado exitosamente',
            'error': 'Error al eliminar el gasto'
        },
        'anticipo_create': {
            'success': 'Anticipo registrado exitosamente',
            'error': 'Error al registrar el anticipo'
        },
        'anticipo_edit': {
            'success': 'Anticipo actualizado exitosamente',
            'error': 'Error al actualizar el anticipo'
        },
        'anticipo_delete': {
            'success': 'Anticipo eliminado exitosamente',
            'error': 'Error al eliminar el anticipo'
        },
        'colaborador_create': {
            'success': 'Colaborador "{colaborador.nombre}" creado exitosamente',
            'error': 'Error al crear el colaborador'
        },
        'colaborador_edit': {
            'success': 'Colaborador "{colaborador.nombre}" actualizado exitosamente',
            'error': 'Error al actualizar el colaborador'
        },
        'colaborador_delete': {
            'success': 'Colaborador "{colaborador.nombre}" eliminado exitosamente',
            'error': 'Error al eliminar el colaborador'
        },
        'factura_create': {
            'success': 'Factura registrada exitosamente',
            'error': 'Error al registrar la factura'
        },
        'factura_edit': {
            'success': 'Factura actualizada exitosamente',
            'error': 'Error al actualizar la factura'
        },
        'factura_delete': {
            'success': 'Factura eliminada exitosamente',
            'error': 'Error al eliminar la factura'
        }
    }
    
    print("üìã Notificaciones espec√≠ficas definidas para:")
    for modulo, notifs in notificaciones_modulos.items():
        print(f"  üîπ {modulo}: {len(notifs)} tipos de notificaci√≥n")
    
    return notificaciones_modulos

def verificar_implementacion_toast():
    """Verificar que el sistema toast est√© implementado correctamente"""
    print(f"\n‚úÖ VERIFICANDO IMPLEMENTACI√ìN TOAST")
    print("=" * 60)
    
    archivos_verificar = [
        'static/css/toast-notifications.css',
        'static/js/toast-notifications.js'
    ]
    
    for archivo in archivos_verificar:
        if os.path.exists(archivo):
            print(f"  ‚úÖ {archivo} existe")
        else:
            print(f"  ‚ùå {archivo} no existe")
    
    # Verificar que el template base incluya los archivos
    try:
        with open('templates/base.html', 'r') as f:
            content = f.read()
            
        if 'toast-notifications.css' in content:
            print("  ‚úÖ CSS de toast incluido en base.html")
        else:
            print("  ‚ùå CSS de toast NO incluido en base.html")
            
        if 'toast-notifications.js' in content:
            print("  ‚úÖ JS de toast incluido en base.html")
        else:
            print("  ‚ùå JS de toast NO incluido en base.html")
            
    except Exception as e:
        print(f"  ‚ùå Error leyendo base.html: {e}")

def mostrar_beneficios_toast():
    """Mostrar los beneficios del sistema toast"""
    print(f"\nüéâ BENEFICIOS DEL SISTEMA TOAST PARA TODOS LOS M√ìDULOS")
    print("=" * 60)
    
    beneficios = [
        "üé® Notificaciones consistentes en todo el sistema",
        "‚è±Ô∏è Desaparecen autom√°ticamente (no molestan al usuario)",
        "üì± Dise√±o responsive para m√≥viles y desktop",
        "üé≠ Animaciones suaves y profesionales",
        "üéØ Posicionamiento fijo (esquina superior derecha)",
        "üé® Iconos y colores apropiados para cada tipo",
        "‚ùå Bot√≥n de cerrar manual si es necesario",
        "üìä Barra de progreso visual del tiempo restante",
        "üé™ Efectos hover y transiciones elegantes",
        "üîß F√°cil implementaci√≥n en cualquier m√≥dulo",
        "üìù Mensajes claros y concisos",
        "üöÄ Mejora significativa de la experiencia de usuario"
    ]
    
    for beneficio in beneficios:
        print(f"  {beneficio}")

def main():
    """Funci√≥n principal"""
    print("üîî APLICANDO NOTIFICACIONES TOAST A TODOS LOS M√ìDULOS")
    print("=" * 70)
    
    try:
        # 1. Buscar notificaciones existentes
        modulos = buscar_notificaciones_en_views()
        
        # 2. Simplificar notificaciones complejas
        cambios = simplificar_notificaciones()
        
        # 3. Crear notificaciones espec√≠ficas
        notificaciones_especificas = crear_notificaciones_especificas()
        
        # 4. Verificar implementaci√≥n
        verificar_implementacion_toast()
        
        # 5. Mostrar beneficios
        mostrar_beneficios_toast()
        
        # Resumen final
        print(f"\n" + "=" * 70)
        print("üìã RESUMEN FINAL")
        print("=" * 70)
        
        print("üéâ ¬°SISTEMA TOAST APLICADO A TODOS LOS M√ìDULOS!")
        print(f"‚úÖ {len(modulos)} m√≥dulos identificados")
        print(f"‚úÖ {cambios} notificaciones simplificadas")
        print(f"‚úÖ {len(notificaciones_especificas)} tipos de notificaci√≥n definidos")
        print("‚úÖ Sistema completamente funcional")
        
        print(f"\nüåê M√ìDULOS CON NOTIFICACIONES TOAST:")
        for modulo in modulos.keys():
            print(f"  üîπ {modulo}")
        
        print(f"\nüéØ PR√ìXIMOS PASOS:")
        print("  1. Probar cada m√≥dulo individualmente")
        print("  2. Verificar que las notificaciones aparezcan correctamente")
        print("  3. Ajustar mensajes espec√≠ficos si es necesario")
        print("  4. El sistema ya est√° listo para usar en producci√≥n")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERROR CR√çTICO: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
