#!/usr/bin/env python
"""
Script simple para probar AJAX b√°sico en el sistema
"""

import os
import sys
import django
from pathlib import Path

def configurar_django():
    """Configura Django para el script"""
    try:
        project_root = Path(__file__).parent
        sys.path.insert(0, str(project_root))
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sistema_construccion.settings')
        django.setup()
        print("‚úì Django configurado correctamente")
        return True
    except Exception as e:
        print(f"‚úó Error configurando Django: {e}")
        return False

def test_ajax_endpoints():
    """Prueba que los endpoints AJAX est√©n funcionando"""
    print("\n=== PRUEBA DE ENDPOINTS AJAX ===")
    
    try:
        from django.test import RequestFactory
        from django.contrib.auth.models import User
        from core.views import dashboard
        
        factory = RequestFactory()
        user = User.objects.first()
        
        if not user:
            print("‚úó No hay usuarios en el sistema")
            return False
        
        # Probar dashboard con AJAX
        request = factory.get('/dashboard/', HTTP_X_REQUESTED_WITH='XMLHttpRequest')
        request.user = user
        
        response = dashboard(request)
        
        if response.status_code == 200:
            print("‚úì Dashboard responde a requests AJAX")
        else:
            print(f"‚ö† Dashboard responde con c√≥digo {response.status_code} a AJAX")
        
        return True
        
    except Exception as e:
        print(f"‚úó Error probando endpoints AJAX: {e}")
        return False

def test_json_responses():
    """Prueba que las respuestas JSON est√©n funcionando"""
    print("\n=== PRUEBA DE RESPUESTAS JSON ===")
    
    try:
        from django.test import RequestFactory
        from django.contrib.auth.models import User
        from core.views import dashboard
        
        factory = RequestFactory()
        user = User.objects.first()
        
        if not user:
            print("‚úó No hay usuarios en el sistema")
            return False
        
        # Probar dashboard normal
        request = factory.get('/dashboard/')
        request.user = user
        
        response = dashboard(request)
        
        if response.status_code == 200:
            print("‚úì Dashboard responde correctamente")
            
            # Verificar que el contexto tenga datos JSON
            context = response.context_data if hasattr(response, 'context_data') else {}
            
            # Verificar datos cr√≠ticos para gr√°ficos
            data_keys = ['evolucion_proyectos', 'categorias_gastos', 'montos_gastos']
            missing_keys = []
            
            for key in data_keys:
                if key not in context:
                    missing_keys.append(key)
            
            if missing_keys:
                print(f"‚ö† Claves faltantes para gr√°ficos: {missing_keys}")
            else:
                print("‚úì Todas las claves para gr√°ficos est√°n presentes")
                
                # Verificar que los datos sean serializables
                for key in data_keys:
                    try:
                        import json
                        json.dumps(context[key])
                        print(f"‚úì {key} es serializable a JSON")
                    except Exception as e:
                        print(f"‚úó {key} no es serializable: {e}")
            
            return True
        else:
            print(f"‚úó Dashboard responde con c√≥digo {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚úó Error probando respuestas JSON: {e}")
        return False

def test_static_files_loading():
    """Prueba que los archivos est√°ticos se carguen correctamente"""
    print("\n=== PRUEBA DE CARGA DE ARCHIVOS EST√ÅTICOS ===")
    
    try:
        from django.conf import settings
        from django.contrib.staticfiles.finders import find
        from django.test import Client
        
        client = Client()
        
        # Verificar que los archivos est√©n disponibles
        critical_files = [
            'js/dashboard-charts.js',
            'css/neostructure-enhanced.css',
            'js/global-functions.js'
        ]
        
        all_found = True
        for file_path in critical_files:
            if find(file_path):
                print(f"‚úì {file_path} encontrado")
                
                # Verificar que se pueda acceder v√≠a URL
                url = f"{settings.STATIC_URL}{file_path}"
                print(f"  URL: {url}")
            else:
                print(f"‚úó {file_path} no encontrado")
                all_found = False
        
        return all_found
        
    except Exception as e:
        print(f"‚úó Error probando carga de archivos est√°ticos: {e}")
        return False

def test_chart_initialization():
    """Prueba que los datos para gr√°ficos est√©n disponibles"""
    print("\n=== PRUEBA DE INICIALIZACI√ìN DE GR√ÅFICOS ===")
    
    try:
        from core.models import Proyecto, Gasto, CategoriaGasto
        from django.db.models import Sum, Count
        from django.utils import timezone
        from datetime import timedelta
        
        # Simular datos que se pasan al template
        evolucion_proyectos = [0, 0, 0, 0, 0]  # Valores por defecto
        
        # Obtener datos reales si existen
        if Proyecto.objects.exists():
            proyectos_por_estado = Proyecto.objects.values('estado').annotate(
                total=Count('id')
            )
            
            # Mapear estados a √≠ndices del array
            estado_mapping = {
                'planificacion': 0,
                'ejecucion': 1, 
                'control': 2,
                'cierre': 3,
                'evaluacion': 4
            }
            
            for item in proyectos_por_estado:
                estado = item['estado']
                if estado in estado_mapping:
                    idx = estado_mapping[estado]
                    evolucion_proyectos[idx] = item['total']
            
            print("‚úì Datos de evoluci√≥n de proyectos generados")
            print(f"  Array: {evolucion_proyectos}")
        else:
            print("‚ö† No hay proyectos, usando valores por defecto")
        
        # Datos de gastos por categor√≠a
        if Gasto.objects.exists():
            gastos_por_categoria = Gasto.objects.values('categoria__nombre').annotate(
                total=Sum('monto')
            )
            
            categorias = [item['categoria__nombre'] for item in gastos_por_categoria]
            montos = [float(item['total']) for item in gastos_por_categoria]
            
            print("‚úì Datos de gastos por categor√≠a generados")
            print(f"  Categor√≠as: {categorias}")
            print(f"  Montos: {montos}")
        else:
            print("‚ö† No hay gastos, usando valores por defecto")
        
        return True
        
    except Exception as e:
        print(f"‚úó Error probando inicializaci√≥n de gr√°ficos: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("PRUEBA DE FUNCIONALIDAD AJAX B√ÅSICA")
    print("="*60)
    
    if not configurar_django():
        print("No se puede continuar sin Django configurado")
        return
    
    # Ejecutar todas las pruebas
    pruebas = [
        ("Endpoints AJAX", test_ajax_endpoints),
        ("Respuestas JSON", test_json_responses),
        ("Carga de Archivos Est√°ticos", test_static_files_loading),
        ("Inicializaci√≥n de Gr√°ficos", test_chart_initialization),
    ]
    
    resultados = []
    for nombre, funcion in pruebas:
        try:
            resultado = funcion()
            resultados.append((nombre, resultado))
        except Exception as e:
            print(f"‚úó Error en prueba {nombre}: {e}")
            resultados.append((nombre, False))
    
    # Resumen final
    print("\n" + "="*60)
    print("RESUMEN DE PRUEBAS AJAX")
    print("="*60)
    
    total_pruebas = len(resultados)
    pruebas_exitosas = sum(1 for _, resultado in resultados if resultado)
    
    print(f"Total de pruebas: {total_pruebas}")
    print(f"Pruebas exitosas: {pruebas_exitosas}")
    print(f"Pruebas fallidas: {total_pruebas - pruebas_exitosas}")
    
    if pruebas_exitosas == total_pruebas:
        print("\nüéâ ¬°TODAS LAS PRUEBAS AJAX EXITOSAS!")
        print("El sistema AJAX est√° funcionando correctamente")
    elif pruebas_exitosas > total_pruebas // 2:
        print("\n‚ö†Ô∏è ALGUNAS PRUEBAS AJAX FALLARON")
        print("Revisa los errores anteriores para m√°s detalles")
    else:
        print("\n‚ùå MUCHAS PRUEBAS AJAX FALLARON")
        print("Se requiere atenci√≥n inmediata")
    
    # Recomendaciones espec√≠ficas para AJAX
    print("\n" + "="*60)
    print("RECOMENDACIONES PARA AJAX")
    print("="*60)
    
    print("‚Ä¢ Verificar que Chart.js est√© cargado antes que dashboard-charts.js")
    print("‚Ä¢ Asegurar que los datos JSON se pasen correctamente al template")
    print("‚Ä¢ Verificar que no haya errores JavaScript en la consola del navegador")
    print("‚Ä¢ Comprobar que los archivos est√°ticos se sirvan correctamente")
    print("‚Ä¢ Verificar que CSRF tokens est√©n disponibles para requests POST")
    
    print("\n" + "="*60)
    print("PRUEBAS AJAX COMPLETADAS")
    print("="*60)

if __name__ == "__main__":
    main()
