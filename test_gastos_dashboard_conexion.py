#!/usr/bin/env python3
"""
Script para verificar que el dashboard de gastos est√© conectado a la BD
y que el bot√≥n de gastos redirija correctamente
"""

import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sistema_construccion.settings')
django.setup()

from django.test import Client
from django.contrib.auth.models import User
from django.db.models import Sum, Count
from core.models import Gasto, CategoriaGasto, Proyecto

def verificar_conexion_bd():
    """Verificar que el dashboard est√© conectado a la base de datos"""
    print("üîó VERIFICANDO CONEXI√ìN A BASE DE DATOS")
    print("=" * 50)
    
    try:
        # Verificar modelos
        total_gastos = Gasto.objects.count()
        total_categorias = CategoriaGasto.objects.count()
        total_proyectos = Proyecto.objects.count()
        
        print(f"‚úÖ Total de gastos en BD: {total_gastos}")
        print(f"‚úÖ Total de categor√≠as en BD: {total_categorias}")
        print(f"‚úÖ Total de proyectos en BD: {total_proyectos}")
        
        # Verificar consultas del dashboard
        gastos_aprobados = Gasto.objects.filter(aprobado=True).count()
        gastos_pendientes = Gasto.objects.filter(aprobado=False).count()
        total_monto = Gasto.objects.aggregate(total=Sum('monto'))['total'] or 0
        
        print(f"‚úÖ Gastos aprobados: {gastos_aprobados}")
        print(f"‚úÖ Gastos pendientes: {gastos_pendientes}")
        print(f"‚úÖ Monto total: Q{total_monto:,.2f}")
        
        # Verificar gastos por categor√≠a
        gastos_por_categoria = Gasto.objects.values('categoria__nombre').annotate(
            total=Sum('monto'),
            cantidad=Count('id')
        ).order_by('-total')
        
        print(f"‚úÖ Categor√≠as con gastos: {len(gastos_por_categoria)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en conexi√≥n a BD: {e}")
        return False

def probar_redireccion_gastos():
    """Probar que el bot√≥n de gastos redirija al dashboard"""
    print("\nüîÑ PROBANDO REDIRECCI√ìN DE GASTOS")
    print("=" * 50)
    
    client = Client()
    
    # Obtener usuario admin
    admin_user = User.objects.filter(is_superuser=True).first()
    if not admin_user:
        print("‚ùå No hay usuario admin")
        return False
    
    # Autenticar
    client.force_login(admin_user)
    print(f"‚úÖ Usuario autenticado: {admin_user.username}")
    
    # 1. Probar acceso directo al dashboard
    print("\n1Ô∏è‚É£ Probando acceso directo al dashboard...")
    try:
        response = client.get('/gastos/dashboard/')
        if response.status_code == 200:
            print("  ‚úÖ Dashboard de gastos accesible")
        else:
            print(f"  ‚ùå Error accediendo al dashboard: {response.status_code}")
            return False
    except Exception as e:
        print(f"  ‚ùå Error: {e}")
        return False
    
    # 2. Probar redirecci√≥n desde lista de gastos
    print("\n2Ô∏è‚É£ Probando redirecci√≥n desde lista de gastos...")
    try:
        response = client.get('/gastos/')
        if response.status_code == 302:
            print("  ‚úÖ Lista de gastos redirige correctamente")
            # Verificar que redirija al dashboard
            if 'gastos/dashboard/' in response.url:
                print("  ‚úÖ Redirecci√≥n va al dashboard correcto")
            else:
                print(f"  ‚ùå Redirecci√≥n va a: {response.url}")
                return False
        else:
            print(f"  ‚ùå Lista de gastos no redirige: {response.status_code}")
            return False
    except Exception as e:
        print(f"  ‚ùå Error: {e}")
        return False
    
    return True

def verificar_datos_dashboard():
    """Verificar que el dashboard muestre datos correctos"""
    print("\nüìä VERIFICANDO DATOS DEL DASHBOARD")
    print("=" * 50)
    
    client = Client()
    
    # Obtener usuario admin
    admin_user = User.objects.filter(is_superuser=True).first()
    if not admin_user:
        print("‚ùå No hay usuario admin")
        return False
    
    # Autenticar
    client.force_login(admin_user)
    
    try:
        response = client.get('/gastos/dashboard/')
        if response.status_code == 200:
            content = response.content.decode()
            
            # Verificar que se muestren datos
            if 'Total Gastos' in content and 'Monto Total' in content:
                print("  ‚úÖ Estad√≠sticas principales presentes")
            else:
                print("  ‚ùå Estad√≠sticas principales faltantes")
                return False
            
            if 'Gastos por Categor√≠a' in content:
                print("  ‚úÖ Secci√≥n de categor√≠as presente")
            else:
                print("  ‚ùå Secci√≥n de categor√≠as faltante")
                return False
            
            # Verificar que no haya errores de BD
            if 'Error al cargar' in content:
                print("  ‚ùå Hay errores de carga en el dashboard")
                return False
            else:
                print("  ‚úÖ Dashboard carga sin errores")
            
            return True
        else:
            print(f"  ‚ùå Error cargando dashboard: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"  ‚ùå Error: {e}")
        return False

def mostrar_resumen_cambios():
    """Mostrar resumen de los cambios realizados"""
    print("\nüìã RESUMEN DE CAMBIOS REALIZADOS")
    print("=" * 50)
    print("‚úÖ Bot√≥n 'Gastos' en sidebar ahora va a /gastos/dashboard/")
    print("‚úÖ Vista gastos_list() ahora redirige al dashboard")
    print("‚úÖ Dashboard conectado a base de datos")
    print("‚úÖ Consultas optimizadas con select_related")
    print("‚úÖ Estad√≠sticas calculadas desde BD")
    print("‚úÖ Categor√≠as agrupadas y ordenadas")
    print("‚úÖ Manejo de errores implementado")

def main():
    """Funci√≥n principal"""
    print("üîó VERIFICACI√ìN DE CONEXI√ìN DASHBOARD GASTOS")
    print("=" * 60)
    
    try:
        # Verificar conexi√≥n a BD
        bd_ok = verificar_conexion_bd()
        
        # Probar redirecci√≥n
        redireccion_ok = probar_redireccion_gastos()
        
        # Verificar datos del dashboard
        datos_ok = verificar_datos_dashboard()
        
        # Mostrar resumen
        mostrar_resumen_cambios()
        
        # Resumen final
        print(f"\n" + "=" * 60)
        print("üìã RESUMEN FINAL")
        print("=" * 60)
        
        if bd_ok and redireccion_ok and datos_ok:
            print("üéâ ¬°DASHBOARD DE GASTOS CONFIGURADO EXITOSAMENTE!")
            print("‚úÖ Conexi√≥n a base de datos verificada")
            print("‚úÖ Redirecci√≥n desde sidebar funcionando")
            print("‚úÖ Dashboard muestra datos correctos")
            print("‚úÖ Todas las consultas optimizadas")
            
            print(f"\nüåê PARA PROBAR:")
            print("  1. Ve a: http://localhost:8000/")
            print("  2. Haz clic en 'Gastos' en el sidebar")
            print("  3. Verifica que vaya al dashboard")
            print("  4. Observa las estad√≠sticas y categor√≠as")
        else:
            print("‚ùå HAY PROBLEMAS CON LA CONFIGURACI√ìN")
            if not bd_ok:
                print("  - Problemas con conexi√≥n a BD")
            if not redireccion_ok:
                print("  - Problemas con redirecci√≥n")
            if not datos_ok:
                print("  - Problemas con datos del dashboard")
        
        return bd_ok and redireccion_ok and datos_ok
        
    except Exception as e:
        print(f"\n‚ùå ERROR CR√çTICO: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
